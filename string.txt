The String class represents character strings. 
Allstring literals in Java programs, such as "abc", are implemented as instances of this class. 
Strings are constant; 
their values cannot be changed after they were created. 

String buffers support mutable strings. Because String objects are immutable they can be shared. For example: 

     String str = "abc";
 

is equivalent to: 

     char data[] = {'a', 'b', 'c'};
     String str = new String(data);
 

Here are some more examples of how strings can be used: 

     System.out.println("abc");
     String cde = "cde";
     System.out.println("abc" + cde);
     String c = "abc".substring(2, 3);
     String d = cde.substring(1, 2);
 

The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings,
 for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard versionspecified by the Character class. 

The Java language provides special support for the stringconcatenation operator ( + ), 
and for conversion of other objects to strings. For additional information on string concatenation and conversion, see The Java Language Specification. 

Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown. 

A String represents a string in the UTF-16 formatin which supplementary characters are
 represented by surrogatepairs (see the section UnicodeCharacter Representations in the Character class formore information).
Index values refer to char code units, so a supplementarycharacter uses two positions in a String. 

The String class provides methods for dealing withUnicode code points (i.e., characters), in addition to those fordealing with Unicode code units (i.e., char values). 

Unless otherwise noted, methods for comparing Strings do not take localeinto account. 
The java.text.Collator class provides methods forfiner-grain, locale-sensitive String comparison.


Since:1.0Author:Lee BoyntonArthur van HoffMartin BuchholzUlf ZibisSee Also:java.lang.Object.toString()java.lang.StringBufferjava.lang.StringBuilderjava.nio.charset.CharsetImpl 
Note:The implementation of the string concatenation operator is left tothe discretion of a Java compiler, as long as the compiler ultimately conformsto The Java Language Specification. 
For example, the javac compilermay implement the operator with StringBuffer, StringBuilder,or java.lang.invoke.StringConcatFactory depending on the JDK version. 
Theimplementation of string conversion is typically through the method toString,defined by Object and inherited by all classes in Java.@jls15.18.1 String Concatenation Operator +